---
## Author
author:
  name: Иванова Ангелина Олеговна
  degrees: DSc
  orcid: 0000-0002-0877-7063
  email: 1032252598@pfur.ru
  affiliation:
    - name: Российский университет дружбы народов
      country: Российская Федерация
      postal-code: 117198
      city: Москва
      address: ул. Миклухо-Маклая, д. 6

## Title
title: "Лабораторная работа №2"
subtitle: "НПИбд-01-25 №1032252598"
license: "CC BY"
---

# Цель работы

Цель данной дабораторной работы -- изучить идеологии и применение средств контроля версий, и
получить практические навыки по работе с системой контроля версий git.

# Теоретическое введение

## Системы контроля версий. Общие понятия

Системы контроля версий (Version Control System, VCS) применяются при работе нескольких человек над одним проектом. Обычно основное дерево проекта хранится в локальном или удалённом репозитории, к которому настроен доступ для участников проекта.При внесении изменений в содержание проекта система контроля версий позволяет их фиксировать, совмещать изменения, произведённые разными участниками проекта, производить откат к любой более ранней версии проекта, если это требуется.

В классических системах контроля версий используется централизованная модель, предполагающая наличие единого репозитория для хранения файлов. Выполнение большинства функций по управлению версиями осуществляется специальным сервером. Участник проекта (пользователь) перед началом работы посредством определённых команд получает yужную ему версию файлов. После внесения изменений пользователь размещает новую версию в хранилище. При этом предыдущие версии не удаляются из центрального хранилища и к ним можно вернуться в любой момент. Сервер может сохранять не полную версию изменённых файлов, а производить так называемую дельта-компрессию — сохранять только изменения между последовательными версиями, что позволяет уменьшить объём хранимых данных.

Системы контроля версий поддерживают возможность отслеживания и разрешения конфликтов, которые могут возникнуть при работе нескольких человек над одним файлом. Можно объединить (слить) изменения, сделанные разными участниками (автоматически или вручную), вручную выбрать нужную версию, отменить изменения вовсе или заблокировать файлы для изменения. В зависимости от настроек блокировка не позволяет другим пользователям получить рабочую копию или препятствует изменению рабочей копии файла средствами файловой системы ОС, обеспечивая, таким образом, привилегированный доступ только одному пользователю, работающему с файлом.

Системы контроля версий также могут обеспечивать дополнительные, более гибкие функциональные возможности. Например, они могут поддерживать работу с несколькими версиями одного файла, сохраняя общую историю изменений до точки ветвления версий и собственные истории изменений каждой ветви. Кроме того, обычно доступна информация о том, кто из участников, когда и какие изменения вносил. Обычно такого рода информация хранится в журнале изменений, доступ к которому можно ограничить.

В отличие от классических в распределённых системах контроля версий центральныйрепозиторий не является обязательным.

Среди классических VCS наиболее известны CVS, Subversion, а среди распределённых -- Git, Bazaar, Mercurial. Принципы их работы схожи, отличаются они в основном синтаксисом используемых в работе команд.

## Система контроля версий Git

Система контроля версий Git представляет собой набор программ командной строки. Доступ к ним можно получить из терминала посредством ввода команды git с различными опциями. Благодаря тому, что Git является распределённой системой контроля версий, резервную копию локального хранилища можно сделать простым копированием или архивацией.

## Основные команды git

Наиболее часто используемые команды git представлены в таблице.

| Команда | Описание                                                                                                          |
|---------------------|----------------------------------------------------------------------------------------------------------------------------|
| `git init`          | создание основного дерева репозитория                                                                               |
| `git pull `      | получение обновлений (изменений) текущего дерева из центрального репозитория     |
| `git push`       | отправка всех произведённых изменений локального дерева в центральный репозиторий                                        |
| `git diff`      | просмотр текущих изменений |
| `git add .`       | добавить все изменённые и/или созданные файлы и/или каталоги                                                                                   |
| `git add`      | добавить конкретные изменённые и или созданные файлы и или каталоги                                                                                  |
| `git rm`       | удалить файл и/или каталог из индекса репозитория, при этом файл и/или каталог остаётся в локальной директории                                                                                          |
| `git commit -am`       | сохранить все добавленные изменения и все изменённые файлы                                                                                 |
| `git checkout -b`          | создание новой ветки, базирующейся на текущей                                                                               |
| `git checkout`          | переключение на некоторую ветку, при переключении на ветку,которой ещё нет в локальном репозитории, она будет создана и связана удалённой                                                                              |
| `git push origin`          | отправка изменений конкретной ветки в центральный репозиторий                                                                               |
| `git merge --no-ff`          | слияние ветки с текущим деревом                                                                               |
| `git branch -d`          | удаление локальной уже слитой с основным деревом ветки                                                                               |
| `git branch -D`          | принудительное удаление локальной ветки                                                                               |
| `git push origin`          | удаление ветки с центрального репозитория                                                                               |

## Стандартные процедуры работы при наличии центрального
репозитория
Работа пользователя со своей веткой начинается с проверки и получения изменений из
центрального репозитория (при этом в локальное дерево до начала этой процедуры не
должно было вноситься изменений):

git checkout master

git pull

git checkout -b имя_ветки

Затем можно вносить изменения в локальном дереве и/или ветке.
После завершения внесения какого-то изменения в файлы и/или каталоги проекта необ-
ходимо разместить их в центральном репозитории. Для этого необходимо проверить, какие
файлы изменились к текущему моменту:

git status

При необходимости удаляем лишние файлы, которые не хотим отправлять в центральный
репозиторий.
Затем полезно просмотреть текст изменений на предмет соответствия правилам ведения
чистых коммитов:

git diff

Если какие-либо файлы не должны попасть в коммит, то помечаем только те файлы, изменения которых нужно сохранить. Для этого используем команды добавления и/или удаления с нужными опциями:

git add имена_файлов

git rm имена_файлов

Если нужно сохранить все изменения в текущем каталоге, то используем:

git add .

Затем сохраняем изменения, поясняя, что было сделано:

git commit -am "Some commit message"

и отправляем в центральный репозиторий:

git push origin имя_ветки

или

git push

# Выполнение лабораторной работы

## Настройка github

Создали учётную запись на сайте https://github.com/ и заполнили основные данные.
<figure>
![Созданный аккаунт в Github](image/1.png "Созданный аккаунт в Github"){#fig-001 width=90%}
</figure>

## Базовая настройка git

Сначала сделаем предварительную конфигурацию git. Открыли терминал и ввели следующие команды, указав имя IvanovaAngelina и e-mail 1032252598@pfur.ru.
<figure>
![Команды с именем пользователя и e-mail](image/2.png "Команды с именем пользователя и e-mail"){#fig-001 width=90%}
</figure>
Настроили utf-8 в выводе сообщений git.
<figure>
![Команда для настройки utf-8](image/3.png "Команда для настройки utf-8"){#fig-001 width=90%}
</figure>
Задали имя начальной ветки (назвали её master), а также установили параметры autocrlf и safecrlf.
<figure>
![Задание начальной ветки и установка параметров](image/4.png "Задание начальной ветки и установка параметров"){#fig-001 width=90%}
</figure>

## Создание SSH-ключа

Для последующей идентификации пользователя на сервере репозиториев сгенерировали приватный и открытый ключи, которые сохранились в каталоге ~/.ssh/.
<figure>
![Генерация ключа](image/5.png "Генерация ключа"){#fig-001 width=90%}
</figure>
Загрузили сгенерированный открытый ключ. Зашли на сайт http://github.org/ под своей учётной записью и перешли в меню Setting . После этого выбрали в боковом меню SSH and GPG keys и нажали кнопку New SSH key. Скопировали из локальной консоли ключ в буфер обмена
<figure>
![Копирование ключа](image/6.png "Копирование ключа"){#fig-001 width=90%}
</figure>
Вставили ключ в появившееся на сайте поле и указали для ключа имя IvanovaAngelina. После чего нажали на кнопку Add SSH Key. Таким образом, успешно добавили ключ.
<figure>
![Подтверждение успешного добавления ключа](image/7.png "Подтверждение успешного добавления ключа"){#fig-001 width=90%}
</figure>

## Создание рабочего пространства и репозитория курса на основе шаблона

Открыли терминал и создали каталог для предмета «Архитектура компьютера»
<figure>
![Создание директории](image/8.png "Создание директории"){#fig-001 width=90%}
</figure>

## Создание репозитория курса на основе шаблона

Перешли на станицу репозитория с шаблоном курса https://github.com/yamadharma/cour se-directory-student-template. Далее выбрали Use this template. В открывшемся окне задали имя репозитория study_2025–2026_arh-pc и создали репозиторий, нажав кнопку 'Create repository from template'
<figure>
![Проверка создания репозитория](image/9.png "Проверка создания репозитория"){#fig-001 width=90%}
</figure>
Открыли терминал и перешли в каталог курса
<figure>
![Переход в каталог](image/10.png "Переход в каталог"){#fig-001 width=90%}
</figure>
Клонировали созданный репозиторий
<figure>
![Клонирование репозитория](image/11.png "Клонирование репозитория"){#fig-001 width=90%}
</figure>

## Настройка каталога курса

Перешли в каталог курса.
<figure>
![Переход в каталог](image/12.png "Переход в каталог"){#fig-001 width=90%}
</figure>
Создали необходимые каталоги.
<figure>
![Создание каталогов 1](image/13.png "Создание каталогов 1"){#fig-001 width=90%}
</figure>
<figure>
![Создание каталогов 2](image/14.png "Создание каталогов 2"){#fig-001 width=90%}
</figure>
Проверили правильность создания иерархии рабочего пространства в локальном репозитории и на странице github.
<figure>
![Проверка правильность создания](image/15.png "Проверка правильность создания"){#fig-001 width=90%}
</figure>

## Задание для самостоятельной работы

Создали отчет по выполнению лабораторной работы в соответствующем каталоге рабочего пространства (labs/lab02/report).
<figure>
![Создание отчета по 2 лабораторной](image/16.png "Создание отчета по 2 лабораторной"){#fig-001 width=90%}
</figure>
Скопировали отчеты по выполнению предыдущих лабораторных работ в соответствующие каталоги созданного рабочего пространства с помощью команды mc
<figure>
![Копирование отчета по 2 лабораторной](image/17.png "Копирование отчета по 2 лабораторной"){#fig-001 width=90%}
</figure>
Загрузили файлы на github.
<figure>
![Загрузка файлов на github](image/18.png "Загрузка файлов на github"){#fig-001 width=90%}
</figure>

# Выводы

Изучили идеологии и применение средств контроля версий, и получили
практические навыки по работе с системой контроля версий git. Создали аккаунт
github, связали со своим устройством, создали рабочее пространство и репозиторий и
загрузили отчеты по первым лабораторным работам.
::: {#refs}
:::
